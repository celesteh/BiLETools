CLASS:: NetAPI
summary:: A class that manages a network based API for calling functions and accessing data
categories:: Libraries>BiLETools
related:: Classes/OscGroupClient, Classes/BileTools, Classes/NetworkGui

DESCRIPTION::
This class handles network ommunication for BiLETools.  This can be done via the the OscGroup server or via broadcast.


If you want to use the OSCGroup server, the constructor asks for the full path to the client, the URL of the serverm your username, your password, the group name and the group password. Your group must agree ahead on the server url, the group name and the group password. You can put anything you want for your name, as long as it has no spaces or special characters. You can also put anything you want for your password. You can change it between sessions, but may run into problems if you change it in the middle of a gig or rehearsal.

code::
a = NetAPI("/Applications/Media/pro/audio/SuperCollider/OscGroup/OscGroupClient", "oscgroups.iua.upf.edu", "nick", "passwd", "laptoppers", "laptoppers_password");
::

If you want to use broadcast, you only need to provide your username, groupname and ideally a port.

code::
a = NetAPI.broadcast("nick", "laptoppers", 67120);
::

This class  knows your hostname and ip address, so if you want those:

code::
a.my_ip
a.hostname
::

To add an API method, you need a selector, a function and, optionally, a description:

code::
(
	a.add('speak', { arg text;
		text.speak;
	}, "Speak the provided text. Usage: speak, text");
)
::

To call this function from anywhere else in your code:

code::
a.call('speak', "it talks");
::

To see the help for it:

code::
a.help('speak').postln;
::

Or you can call it from outside of your current namespace:

code::
b = NetAPI.default;

b.speak("It still speaks");
::

Anything you add to b will be visible to a and vice versa.


You can call remote APIs in the same way, however, in the case that you and somebody else have the same selector name (which is a probable conflict), it will call your local API and not go to the network.  If you want to send something to the network, use sendMsg:

code::
a.sendMsg('any_symbol', "anything can go here and will go out to the group server")
::

Things that you send out to an OSCGroupServer in this way will not echo locally. However, broadcast messages ususally will echo locally.

code::
a.sendMsg('speak', "this may not speak here");
// vs
a.call('speak', "this will only speak locally");
::

To open a chat window, see link::Classes/BileChat::

To open a shared stopwatch, see link::Classes/BileClock::




I

CLASSMETHODS::

METHOD:: oscgroup
Create a new instance of NetAPI which uses OSCGroups
argument:: path
Path to the OSCGroupClient program

argument:: serveraddress
The address of the OscGroupServer

argument:: username
Your username on the network. This should not include spaces, commas or special characters that can't be used in an OSC tag.

argument:: userpass
Your password on the OscGroupServer. You can put anything you want for this and can change it between sessions. You may run into problem if you try to change your password in the middle of a gig or rehearsal.

argument:: groupname
A symbol used for the name of the group in OSC messages and, for WAN users, the name of the group on the OSCGroupServer. This should not include spaces, commas or special characters that can't be used in an OSC tag.

argument:: grouppass
For WAN users, he password for the OscGroup on the OscGroupServer



METHOD:: broadcast
Create a new instance of NetAPI which uses broadcast networking
argument:: username
Your username on the network. This should not include spaces, commas or special characters that can't be used in an OSC tag.
argument:: groupname
A symbol used for the name of the group in OSC messages. This should not include spaces, commas or special characters that can't be used in an OSC tag.

argument:: port
The port you would like to receive messages on and send messages to. Broadcast users must all specify the same port. It can be a good idea to use a different port than the default langPort, especially if anyone is having problems with crashing sclang.



METHOD:: default
argument:: obj
A symbol used for the name of the group in OSC messages, used in case no group name is otherwise specified

returns:: When used as a getter, returns the instance of NetAPI that has already been created elsewhere, which uses the default group name


INSTANCEMETHODS::

METHOD:: call
Locally invoke a function saved in the NetAPI

argument:: selector
a symbol key for the function

argument::  ... args
arguments

discussion::
We could join the network and register a function.
code::
a = NetAPI.broadcast("nick");
a.add('postln',{arg text;
	text.postln;
}, "Echo the text to the post window. Usage: postln, text");
::
Later, we can use this function in our own code, via the class method.
code::
a.call('postln', "Some text");
::



METHOD:: add
Add a function to the API. This will make it available locally and remotelt and advertise it on the network.

argument:: selector
A unique symbol to identify the function

argument:: func
The function you wish to be invokable via the NetAPI

argument:: desc
A short string describing what the function does and what arguments it takes

discussion::
code::
a = NetAPI.broadcast("nick");
a.add('postln',{arg text;
	text.postln;
}, "Echo the text to the post window. Usage: postln, text");
::


METHOD:: map
map a key to a function known to the API

argument:: selector
The unquie symbol for the data

argument:: key
The unique symbol for the function you want to invoke when the data changes.
discussion::
code::
a = NetAPI.broadcast("nick");
a.add('postln',{arg text;
	text.postln;
}, "Echo the text to the post window. Usage: postln, text");

// Now let's say another User on the same LAN has joined as A and used SharedREsource.mountAPI to share some data called 'demo'
// When demo changes, it will invoke the postln.
m.map('A/demo', 'postln');

::





METHOD:: subscribe
Ask for updates to shared remote data

argument::  selector
The unquique symbol for the remote data, which is formatted as an OSC tag, username/data_id



METHOD:: remove
Remove a function from the API. IT can no longer be called via the API locally or remotely and remote users will be informed of the removal.

argument:: selector
The unique symbol you used to add the function

discussion::
code::
a=NetAPI.default
a.remove(\postln);
::




METHOD:: help
Shows the help text associated with a remote or local API call.



METHOD:: sendMsg
Send a message to the network

argument::  ... msg
Any number of arguments

discussion::
code::
a = NetAPI.default;
a.sendMsg('any_symbol', "anything can go here and will go out to the group server")
::


